# This references an OpenJDK container from the
# Docker Hub https://hub.docker.com/_/openjdk/
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
#box: openjdk:8-jdk
#box: oraclelinux:7.5

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
build:
  box: openjdk:8-jdk
    # Steps make up the actions in your pipeline
    # Read more about steps on our dev center:
    # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # https://github.com/wercker/step-maven
    - wercker/maven:
      goals: install
      cache_repo: true
      version: 3.5.2

    - script:
        name: Execute sonarqube analyze process
        code: |
          echo "!!! start now ..."
          #mvn sonar:sonar -Dsonar.host.url=$SONAR_URL > ./temp_output
          #SONAR_GET_REPORT_URL=`cat ./temp_output | grep "More about the report processing at " | awk -F 'at ' '{print substr($2,1)}'`
          #cat ./temp_output
          #echo $SONAR_GET_REPORT_URL
          
    - script:
        name: Get sonarqube analyze result
        code: |
          echo "!!! start now ..."
          #for((i=1;i<=$SONAR_GET_RESULT_LOOP_CNT;i++));
          #do
            #sleep 2m
            #echo "Get Sonarqube analyze process..."
            #reportProcess=$(curl -X GET -i $SONAR_GET_REPORT_URL | grep "status" | awk -F '"status":' '{print substr($2,2,7)}')
            #echo $reportProcess
            #if [ -z $reportProcess ]; then
              #continue
            #fi
            #if [ $reportProcess = "IN_PROGRESS" ]; then
              #continue
            #else
              #break
            #fi
          #done
          #fullResult=$(curl -X GET -i $SONAR_URL/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY)
          #echo "Sonarqube analyze full result is:"
          #echo $fullResult
          #sonarResult=`echo $fullResult | grep projectStatus | awk -F '"status":' '{print substr($2,2,2)}'`
          #if [ -z $sonarResult ]; then
            #export sonarResult='NG'
          #fi
          #echo "Quality gate status is: $sonarResult"
          #if [ $sonarResult != "OK" ]; then
            #exit 1
          #fi
#Build docker image and push to OCIR.
push-to-registry:
  box: openjdk:8-jdk
  steps:
    # Push to OCIR
    - internal/docker-push:
      username: $OCIR_USERNAME
      password: $OCIR_PASSWORD
      tag: $OCIR_TAG
      repository: $OCIR_USERNAME/$OCIR_REPOSITORY
      registry: $OCIR_REGISTRY
      entrypoint: java -jar /pipeline/source/target/demo-0.0.1-SNAPSHOT.jar
#Provision Oracle kubernetes engine environment.
provision-oke:
  box: oraclelinux:7.5
  steps:
    - beiwangtest18/provision-oke:
        NAME_PREFIX:         $NAME_PREFIX
        USER_OCID:           $USER_OCID
        FINGERPRINT:         $FINGERPRINT
        API_KEY:             $API_KEY
        TENANCY_OCID:        $TENANCY_OCID
        REGION:              $REGION
        COMPARTMENT_OCID:    $COMPARTMENT_OCID
#Delete Oracle kubernetes engine environment
destroy-oke:
  box: oraclelinux:7.5
  steps:
    - beiwangtest18/destroy-oke:
        NAME_PREFIX:         $NAME_PREFIX
        USER_OCID:           $USER_OCID
        FINGERPRINT:         $FINGERPRINT
        API_KEY:             $API_KEY
        TENANCY_OCID:        $TENANCY_OCID
        REGION:              $REGION
        COMPARTMENT_OCID:    $COMPARTMENT_OCID
#Deploy application on OKE.
deploy-oke:
  box: oraclelinux:7.5
  steps:
    - beiwangtest18/deploy-to-oke:
        NAME_PREFIX:         $NAME_PREFIX
        USER_OCID:           $USER_OCID
        FINGERPRINT:         $FINGERPRINT
        API_KEY:             $API_KEY
        TENANCY_OCID:        $TENANCY_OCID
        REGION:              $REGION
#Test step
test:
  box: oraclelinux:7.5
  steps:
    - script:
        name: Execute test step
        code: |
            echo "!!! Installing xvfb now ..."
            sudo curl -O "http://mirror.centos.org/centos/7/os/x86_64/Packages/xorg-x11-server-Xvfb-1.19.5-5.el7.x86_64.rpm"
            sudo yum -y localinstall xorg-x11-server-Xvfb-1.19.5-5.el7.x86_64.rpm
            echo "!!! Installing chromedriver now ..."
            sudo curl -O "https://chromedriver.storage.googleapis.com/2.40/chromedriver_linux64.zip"
            sudo yum install unzip -y
            unzip -o chromedriver_linux64.zip
            chmod -R 0755 chromedriver
            sudo cp chromedriver /usr/local/bin/chromedriver
            ls -lart /usr/local/bin/chromedriver
            echo "!!! Installing chrome now ..."
            sudo cat << EOF > /etc/yum.repos.d/google-chrome.repo
            [google-chrome]
            name=google-chrome
            baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64/
            enabled=1
            gpgcheck=1
            gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub
            EOF
            
            sudo yum install google-chrome-stable -y
            pwd
            echo "!!! Install JAVA and ANT now ..."
            sudo yum install java-1.8.0-openjdk.x86_64 -y
            sudo yum install ant -y
            #sudo rpm -ivh http://mirror.centos.org/centos/7/os/x86_64/Packages/ant-junit-1.9.2-9.el7.noarch.rpm
            sudo yum install -y http://mirror.centos.org/centos/7/os/x86_64/Packages/ant-junit-1.9.2-9.el7.noarch.rpm
            #sudo yum install -y ant-junit
            #rm -rf /var/cache/yum
            #yum clean all
            #pwd         
            echo "!!! Checking ENV now ..."
            sudo export ANT_HOME=/usr/share/ant
            sudo export JAVA_HOME=/usr/lib/jvm/java
           
            
            echo ${ANT_HOME}
            echo ${JAVA_HOME}
            
            ant -diagnostics
            sudo cd ./test/functional/WhackaPodUIAuto
            ant -file getip.xml -logfile getip.log
            ant -file checkbuild.xml -logfile checktext.log
            
            RETURN=`cat getip.log | grep "FAILED" | wc -l`
            if [ ${RETURN} -eq "0" ]; then
                echo "GET IP PASS!"
                exit 1
            else
                echo "GET IP FAIL!"
                exit 0
            fi
            
            RETURN1=`cat checktext.log | grep "FAILED" | wc -l`
            if [ ${RETURN1} -eq "0" ]; then
                echo "check text PASS!"
                exit 1
            else
                echo "check text FAIL!"
                exit 0
            fi
